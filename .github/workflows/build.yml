name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  check-vendor-hash:
    name: Check Vendor Hash
    runs-on: ubuntu-latest
    outputs:
      hash-valid: ${{ steps.check.outputs.valid }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v30
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes
    
    - name: Check if vendor hash is valid
      id: check
      shell: bash
      run: |
        set -euo pipefail
        
        echo "Checking if vendor hash is valid..."
        
        # Try to build just the vendor derivation
        # We expect this might fail, so we capture the exit code
        if nix build .#default.goModules --no-link 2>&1 | tee build.log; then
          # Build succeeded
          echo "valid=true" >> "$GITHUB_OUTPUT"
          echo "✅ Vendor hash is valid"
        else
          # Build failed - check why
          if grep -qE "(hash mismatch|invalid SRI hash)" build.log; then
            echo "valid=false" >> "$GITHUB_OUTPUT"
            echo "❌ Vendor hash needs updating"
            # Extract the correct hash for logging
            CORRECT_HASH=$(grep -oE 'got:[[:space:]]+sha256-[a-zA-Z0-9+/]+' build.log | sed 's/got:[[:space:]]*//' || echo "unknown")
            echo "Expected hash: $CORRECT_HASH"
          else
            # Build failed for other reasons
            echo "valid=false" >> "$GITHUB_OUTPUT"
            echo "❌ Build failed for reasons other than hash mismatch"
            echo "Build log:"
            tail -20 build.log
            exit 1
          fi
        fi

  build:
    name: Build
    needs: check-vendor-hash
    if: needs.check-vendor-hash.outputs.hash-valid == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        go: ['1.21', '1.22', '1.23']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}
        cache: true
    
    - name: Get dependencies
      run: go mod download
    
    - name: Verify module
      run: go mod verify
    
    - name: Build
      run: go build -v -o siplink-${{ matrix.os }}-go${{ matrix.go }} main.go
    
    - name: Test binary
      run: ./siplink-${{ matrix.os }}-go${{ matrix.go }} --help
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run staticcheck
      uses: dominikh/staticcheck-action@v1
      with:
        version: "latest"
        install-go: false
        cache-key: ${{ matrix.go }}
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: siplink-${{ matrix.os }}-go${{ matrix.go }}
        path: siplink-${{ matrix.os }}-go${{ matrix.go }}
        retention-days: 7

  nix-build:
    name: Nix Build
    needs: check-vendor-hash
    if: needs.check-vendor-hash.outputs.hash-valid == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v30
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes
    
    - name: Check Nix flake
      run: nix flake check
    
    - name: Build with Nix
      run: nix build
    
    - name: Test Nix build output
      run: ./result/bin/siplink --help

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [check-vendor-hash, build, nix-build]
    if: always()
    
    steps:
    - name: Report status
      shell: bash
      run: |
        set -euo pipefail
        
        if [[ "${{ needs.check-vendor-hash.outputs.hash-valid }}" == "false" ]]; then
          echo "⏸️ Build skipped - waiting for vendor hash update"
          echo "The update-vendor-hash workflow should handle this automatically."
          exit 0
        elif [[ "${{ needs.build.result }}" == "success" ]] && [[ "${{ needs.nix-build.result }}" == "success" ]]; then
          echo "✅ All builds passed!"
          exit 0
        else
          echo "❌ Build failed"
          echo "Build result: ${{ needs.build.result }}"
          echo "Nix build result: ${{ needs.nix-build.result }}"
          exit 1
        fi
    
    - name: Trigger vendor hash update
      if: needs.check-vendor-hash.outputs.hash-valid == 'false' && github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'update-vendor-hash.yml',
            ref: 'main'
          })